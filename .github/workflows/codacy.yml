name: Codacy CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-audit:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: uvlhub_root_password
          MYSQL_DATABASE: uvlhubdb_test
          MYSQL_USER: uvlhub_user
          MYSQL_PASSWORD: uvlhub_password
        ports:
          - 3306:3306
        # healthcheck para no correr antes de tiempo
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # (Opcional pero recomendable) deps nativas si usas mysqlclient / PyMySQL variantes
      - name: Install system packages (MySQL client headers)
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev pkg-config jq

      - name: Upgrade pip & tooling
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install pip-audit coverage pytest

      - name: Install project dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ] || [ -f setup.py ]; then pip install -e .; fi

      - name: Wait for MySQL healthy
        env:
          MYSQL_PWD: uvlhub_password
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u uvlhub_user --silent; then
              echo "MySQL is up"; break
            fi
            echo "Waiting for MySQL ($i/30) ..."
            sleep 2
          done

      - name: Apply migrations to test DB
        env:
          FLASK_ENV: testing
          MARIADB_HOSTNAME: 127.0.0.1
          MARIADB_PORT: "3306"
          MARIADB_TEST_DATABASE: uvlhubdb_test
          MARIADB_USER: uvlhub_user
          MARIADB_PASSWORD: uvlhub_password
        run: |
          # Algunas apps esperan FLASK_APP para CLI
          export FLASK_APP=app
          python -m flask db upgrade

      # 1) Comprobar dependencias desactualizadas (no rompe por defecto)
      - name: Check outdated dependencies
        env:
          FAIL_ON_OUTDATED: "false"   # pon "true" si quieres que falle si hay desactualizadas
        run: |
          echo "Comprobando paquetes desactualizados…"
          pip list --outdated --format=json | tee outdated.json
          COUNT=$(jq 'length' outdated.json)
          echo "Encontrados $COUNT paquetes desactualizados."
          if [ "$COUNT" -gt 0 ]; then
            echo "Resumen (hasta 20):"
            jq -r '.[:20][] | "* \(.name) \(.version) -> \(.latest_version)"' outdated.json
            if [ "$FAIL_ON_OUTDATED" = "true" ]; then
              echo "::error title=Dependencias desactualizadas::Se detectaron $COUNT paquetes desactualizados."
              exit 1
            fi
          fi

      # 2) Tests + cobertura (igual que tenías)
      - name: Run tests with coverage and upload to Codacy
        env:
          FLASK_ENV: testing
          MARIADB_HOSTNAME: 127.0.0.1
          MARIADB_PORT: "3306"
          MARIADB_TEST_DATABASE: uvlhubdb_test
          MARIADB_USER: uvlhub_user
          MARIADB_PASSWORD: uvlhub_password
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          pip install codacy-coverage
          # Ejecuta los tests (ajusta el path si quieres más alcance)
          coverage run -m pytest app/modules/ --ignore-glob='*selenium*'
          coverage xml
          python-codacy-coverage -r coverage.xml

      # 3) Auditoría de seguridad con pip-audit (modo estricto → falla si hay vulns)
      - name: Security audit (pip-audit)
        run: |
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt --strict
          else
            pip-audit --strict
          fi

      - name: Upload reports (outdated/coverage)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-py${{ matrix.python-version }}
          path: |
            outdated.json
            coverage.xml
